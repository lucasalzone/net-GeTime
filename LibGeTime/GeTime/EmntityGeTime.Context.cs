//------------------------------------------------------------------------------
// <auto-generated>
//     Codice generato da un modello.
//
//     Le modifiche manuali a questo file potrebbero causare un comportamento imprevisto dell'applicazione.
//     Se il codice viene rigenerato, le modifiche manuali al file verranno sovrascritte.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeTime
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GeTimeEntities : DbContext
    {
        public GeTimeEntities()
            : base("name=GeTimeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Commesse> Commesse { get; set; }
        public virtual DbSet<Giorni> Giorni { get; set; }
        public virtual DbSet<giorniCommesse> giorniCommesse { get; set; }
        public virtual DbSet<TipologiaOre> TipologiaOre { get; set; }
    
        public virtual int AddHF(Nullable<int> ore, Nullable<System.DateTime> giorno, Nullable<int> utenti)
        {
            var oreParameter = ore.HasValue ?
                new ObjectParameter("Ore", ore) :
                new ObjectParameter("Ore", typeof(int));
    
            var giornoParameter = giorno.HasValue ?
                new ObjectParameter("Giorno", giorno) :
                new ObjectParameter("Giorno", typeof(System.DateTime));
    
            var utentiParameter = utenti.HasValue ?
                new ObjectParameter("Utenti", utenti) :
                new ObjectParameter("Utenti", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddHF", oreParameter, giornoParameter, utentiParameter);
        }
    
        public virtual int AddHL(Nullable<System.DateTime> giorno, Nullable<int> nOre, string commessa, Nullable<int> idU)
        {
            var giornoParameter = giorno.HasValue ?
                new ObjectParameter("giorno", giorno) :
                new ObjectParameter("giorno", typeof(System.DateTime));
    
            var nOreParameter = nOre.HasValue ?
                new ObjectParameter("nOre", nOre) :
                new ObjectParameter("nOre", typeof(int));
    
            var commessaParameter = commessa != null ?
                new ObjectParameter("commessa", commessa) :
                new ObjectParameter("commessa", typeof(string));
    
            var idUParameter = idU.HasValue ?
                new ObjectParameter("idU", idU) :
                new ObjectParameter("idU", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddHL", giornoParameter, nOreParameter, commessaParameter, idUParameter);
        }
    
        public virtual int AddHM(Nullable<int> ore, Nullable<System.DateTime> giorno, Nullable<int> utenti)
        {
            var oreParameter = ore.HasValue ?
                new ObjectParameter("Ore", ore) :
                new ObjectParameter("Ore", typeof(int));
    
            var giornoParameter = giorno.HasValue ?
                new ObjectParameter("Giorno", giorno) :
                new ObjectParameter("Giorno", typeof(System.DateTime));
    
            var utentiParameter = utenti.HasValue ?
                new ObjectParameter("Utenti", utenti) :
                new ObjectParameter("Utenti", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddHM", oreParameter, giornoParameter, utentiParameter);
        }
    
        public virtual int AddHP(Nullable<int> ore, Nullable<System.DateTime> giorno, Nullable<int> utenti)
        {
            var oreParameter = ore.HasValue ?
                new ObjectParameter("Ore", ore) :
                new ObjectParameter("Ore", typeof(int));
    
            var giornoParameter = giorno.HasValue ?
                new ObjectParameter("Giorno", giorno) :
                new ObjectParameter("Giorno", typeof(System.DateTime));
    
            var utentiParameter = utenti.HasValue ?
                new ObjectParameter("Utenti", utenti) :
                new ObjectParameter("Utenti", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddHP", oreParameter, giornoParameter, utentiParameter);
        }
    
        public virtual int InsertCommessa(string nome, string descrizione, Nullable<int> capienza)
        {
            var nomeParameter = nome != null ?
                new ObjectParameter("nome", nome) :
                new ObjectParameter("nome", typeof(string));
    
            var descrizioneParameter = descrizione != null ?
                new ObjectParameter("descrizione", descrizione) :
                new ObjectParameter("descrizione", typeof(string));
    
            var capienzaParameter = capienza.HasValue ?
                new ObjectParameter("capienza", capienza) :
                new ObjectParameter("capienza", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCommessa", nomeParameter, descrizioneParameter, capienzaParameter);
        }
    
        public virtual ObjectResult<SearchCommessa_Result> SearchCommessa(string nomeCommessa, Nullable<int> idUtente)
        {
            var nomeCommessaParameter = nomeCommessa != null ?
                new ObjectParameter("nomeCommessa", nomeCommessa) :
                new ObjectParameter("nomeCommessa", typeof(string));
    
            var idUtenteParameter = idUtente.HasValue ?
                new ObjectParameter("idUtente", idUtente) :
                new ObjectParameter("idUtente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCommessa_Result>("SearchCommessa", nomeCommessaParameter, idUtenteParameter);
        }
    
        public virtual ObjectResult<searchGiorno_Result> searchGiorno(Nullable<System.DateTime> giorno, Nullable<int> id)
        {
            var giornoParameter = giorno.HasValue ?
                new ObjectParameter("giorno", giorno) :
                new ObjectParameter("giorno", typeof(System.DateTime));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<searchGiorno_Result>("searchGiorno", giornoParameter, idParameter);
        }
    }
}
